// Mocks generated by Mockito 5.4.5 from annotations
// in solid_task/test/services/sync/solid_sync_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:convert' as _i7;
import 'dart:typed_data' as _i9;

import 'package:flutter/widgets.dart' as _i13;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:solid_task/models/auth/auth_result.dart' as _i4;
import 'package:solid_task/models/item.dart' as _i3;
import 'package:solid_task/services/auth/interfaces/solid_auth_operations.dart'
    as _i12;
import 'package:solid_task/services/auth/interfaces/solid_auth_state.dart'
    as _i11;
import 'package:solid_task/services/rdf/item_rdf_serializer.dart' as _i14;
import 'package:solid_task/services/rdf/rdf_graph.dart' as _i15;
import 'package:solid_task/services/rdf/rdf_parser.dart' as _i5;
import 'package:solid_task/services/repository/item_repository.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_1 extends _i1.SmartFake
    implements _i2.StreamedResponse {
  _FakeStreamedResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeItem_2 extends _i1.SmartFake implements _i3.Item {
  _FakeItem_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthResult_3 extends _i1.SmartFake implements _i4.AuthResult {
  _FakeAuthResult_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRdfParser_4 extends _i1.SmartFake implements _i5.RdfParser {
  _FakeRdfParser_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i2.Client {
  @override
  _i6.Future<_i2.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i2.Response>);

  @override
  _i6.Future<_i2.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i2.Response>);

  @override
  _i6.Future<_i2.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i7.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i2.Response>);

  @override
  _i6.Future<_i2.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i7.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i2.Response>);

  @override
  _i6.Future<_i2.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i7.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i2.Response>);

  @override
  _i6.Future<_i2.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i7.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i2.Response>);

  @override
  _i6.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<_i9.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i9.Uint8List>.value(_i9.Uint8List(0)),
        returnValueForMissingStub:
            _i6.Future<_i9.Uint8List>.value(_i9.Uint8List(0)),
      ) as _i6.Future<_i9.Uint8List>);

  @override
  _i6.Future<_i2.StreamedResponse> send(_i2.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i6.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_1(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_1(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i6.Future<_i2.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ItemRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockItemRepository extends _i1.Mock implements _i10.ItemRepository {
  @override
  List<_i3.Item> getAllItems() => (super.noSuchMethod(
        Invocation.method(
          #getAllItems,
          [],
        ),
        returnValue: <_i3.Item>[],
        returnValueForMissingStub: <_i3.Item>[],
      ) as List<_i3.Item>);

  @override
  List<_i3.Item> getActiveItems() => (super.noSuchMethod(
        Invocation.method(
          #getActiveItems,
          [],
        ),
        returnValue: <_i3.Item>[],
        returnValueForMissingStub: <_i3.Item>[],
      ) as List<_i3.Item>);

  @override
  _i3.Item? getItem(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getItem,
          [id],
        ),
        returnValueForMissingStub: null,
      ) as _i3.Item?);

  @override
  _i6.Future<_i3.Item> createItem(
    String? text,
    String? creator,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createItem,
          [
            text,
            creator,
          ],
        ),
        returnValue: _i6.Future<_i3.Item>.value(_FakeItem_2(
          this,
          Invocation.method(
            #createItem,
            [
              text,
              creator,
            ],
          ),
        )),
        returnValueForMissingStub: _i6.Future<_i3.Item>.value(_FakeItem_2(
          this,
          Invocation.method(
            #createItem,
            [
              text,
              creator,
            ],
          ),
        )),
      ) as _i6.Future<_i3.Item>);

  @override
  _i6.Future<_i3.Item> updateItem(
    _i3.Item? item,
    String? updater,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateItem,
          [
            item,
            updater,
          ],
        ),
        returnValue: _i6.Future<_i3.Item>.value(_FakeItem_2(
          this,
          Invocation.method(
            #updateItem,
            [
              item,
              updater,
            ],
          ),
        )),
        returnValueForMissingStub: _i6.Future<_i3.Item>.value(_FakeItem_2(
          this,
          Invocation.method(
            #updateItem,
            [
              item,
              updater,
            ],
          ),
        )),
      ) as _i6.Future<_i3.Item>);

  @override
  _i6.Future<void> deleteItem(
    String? id,
    String? deletedBy,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteItem,
          [
            id,
            deletedBy,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> mergeItems(List<_i3.Item>? remoteItems) =>
      (super.noSuchMethod(
        Invocation.method(
          #mergeItems,
          [remoteItems],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Stream<List<_i3.Item>> watchActiveItems() => (super.noSuchMethod(
        Invocation.method(
          #watchActiveItems,
          [],
        ),
        returnValue: _i6.Stream<List<_i3.Item>>.empty(),
        returnValueForMissingStub: _i6.Stream<List<_i3.Item>>.empty(),
      ) as _i6.Stream<List<_i3.Item>>);

  @override
  List<Map<String, dynamic>> exportItems() => (super.noSuchMethod(
        Invocation.method(
          #exportItems,
          [],
        ),
        returnValue: <Map<String, dynamic>>[],
        returnValueForMissingStub: <Map<String, dynamic>>[],
      ) as List<Map<String, dynamic>>);

  @override
  _i6.Future<void> importItems(List<dynamic>? jsonData) => (super.noSuchMethod(
        Invocation.method(
          #importItems,
          [jsonData],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [SolidAuthState].
///
/// See the documentation for Mockito's code generation for more information.
class MockSolidAuthState extends _i1.Mock implements _i11.SolidAuthState {
  @override
  bool get isAuthenticated => (super.noSuchMethod(
        Invocation.getter(#isAuthenticated),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [SolidAuthOperations].
///
/// See the documentation for Mockito's code generation for more information.
class MockSolidAuthOperations extends _i1.Mock
    implements _i12.SolidAuthOperations {
  @override
  _i6.Future<String> getIssuer(String? input) => (super.noSuchMethod(
        Invocation.method(
          #getIssuer,
          [input],
        ),
        returnValue: _i6.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #getIssuer,
            [input],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #getIssuer,
            [input],
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<_i4.AuthResult> authenticate(
    String? issuerUri,
    _i13.BuildContext? context,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #authenticate,
          [
            issuerUri,
            context,
          ],
        ),
        returnValue: _i6.Future<_i4.AuthResult>.value(_FakeAuthResult_3(
          this,
          Invocation.method(
            #authenticate,
            [
              issuerUri,
              context,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.AuthResult>.value(_FakeAuthResult_3(
          this,
          Invocation.method(
            #authenticate,
            [
              issuerUri,
              context,
            ],
          ),
        )),
      ) as _i6.Future<_i4.AuthResult>);

  @override
  _i6.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<String?> resolvePodUrl(String? webId) => (super.noSuchMethod(
        Invocation.method(
          #resolvePodUrl,
          [webId],
        ),
        returnValue: _i6.Future<String?>.value(),
        returnValueForMissingStub: _i6.Future<String?>.value(),
      ) as _i6.Future<String?>);

  @override
  String generateDpopToken(
    String? url,
    String? method,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateDpopToken,
          [
            url,
            method,
          ],
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #generateDpopToken,
            [
              url,
              method,
            ],
          ),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #generateDpopToken,
            [
              url,
              method,
            ],
          ),
        ),
      ) as String);
}

/// A class which mocks [ItemRdfSerializer].
///
/// See the documentation for Mockito's code generation for more information.
class MockItemRdfSerializer extends _i1.Mock implements _i14.ItemRdfSerializer {
  @override
  _i15.RdfGraph itemToRdf(_i3.Item? item) => (super.noSuchMethod(
        Invocation.method(
          #itemToRdf,
          [item],
        ),
        returnValue: _i8.dummyValue<_i15.RdfGraph>(
          this,
          Invocation.method(
            #itemToRdf,
            [item],
          ),
        ),
        returnValueForMissingStub: _i8.dummyValue<_i15.RdfGraph>(
          this,
          Invocation.method(
            #itemToRdf,
            [item],
          ),
        ),
      ) as _i15.RdfGraph);

  @override
  _i3.Item rdfToItem(
    _i15.RdfGraph? graph,
    String? itemUri,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #rdfToItem,
          [
            graph,
            itemUri,
          ],
        ),
        returnValue: _FakeItem_2(
          this,
          Invocation.method(
            #rdfToItem,
            [
              graph,
              itemUri,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeItem_2(
          this,
          Invocation.method(
            #rdfToItem,
            [
              graph,
              itemUri,
            ],
          ),
        ),
      ) as _i3.Item);

  @override
  String itemToString(_i3.Item? item) => (super.noSuchMethod(
        Invocation.method(
          #itemToString,
          [item],
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #itemToString,
            [item],
          ),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #itemToString,
            [item],
          ),
        ),
      ) as String);

  @override
  _i3.Item itemFromString(
    String? content,
    String? itemId, {
    String? documentUrl,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #itemFromString,
          [
            content,
            itemId,
          ],
          {#documentUrl: documentUrl},
        ),
        returnValue: _FakeItem_2(
          this,
          Invocation.method(
            #itemFromString,
            [
              content,
              itemId,
            ],
            {#documentUrl: documentUrl},
          ),
        ),
        returnValueForMissingStub: _FakeItem_2(
          this,
          Invocation.method(
            #itemFromString,
            [
              content,
              itemId,
            ],
            {#documentUrl: documentUrl},
          ),
        ),
      ) as _i3.Item);
}

/// A class which mocks [RdfParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockRdfParser extends _i1.Mock implements _i5.RdfParser {
  @override
  _i15.RdfGraph parse(
    String? input, {
    String? documentUrl,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #parse,
          [input],
          {#documentUrl: documentUrl},
        ),
        returnValue: _i8.dummyValue<_i15.RdfGraph>(
          this,
          Invocation.method(
            #parse,
            [input],
            {#documentUrl: documentUrl},
          ),
        ),
        returnValueForMissingStub: _i8.dummyValue<_i15.RdfGraph>(
          this,
          Invocation.method(
            #parse,
            [input],
            {#documentUrl: documentUrl},
          ),
        ),
      ) as _i15.RdfGraph);
}

/// A class which mocks [RdfParserFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockRdfParserFactory extends _i1.Mock implements _i5.RdfParserFactory {
  @override
  _i5.RdfParser createParser({String? contentType}) => (super.noSuchMethod(
        Invocation.method(
          #createParser,
          [],
          {#contentType: contentType},
        ),
        returnValue: _FakeRdfParser_4(
          this,
          Invocation.method(
            #createParser,
            [],
            {#contentType: contentType},
          ),
        ),
        returnValueForMissingStub: _FakeRdfParser_4(
          this,
          Invocation.method(
            #createParser,
            [],
            {#contentType: contentType},
          ),
        ),
      ) as _i5.RdfParser);
}
