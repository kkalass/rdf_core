// Mocks generated by Mockito 5.4.5 from annotations
// in solid_task/test/services/storage/hive_storage_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:hive_flutter/hive_flutter.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:solid_task/services/storage/hive_backend.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBox_0<E> extends _i1.SmartFake implements _i2.Box<E> {
  _FakeBox_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HiveBackend].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveBackend<T> extends _i1.Mock implements _i3.HiveBackend<T> {
  MockHiveBackend() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> initFlutter([String? subDir]) => (super.noSuchMethod(
        Invocation.method(
          #initFlutter,
          [subDir],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void registerAdapter<A>(_i2.TypeAdapter<A>? adapter) => super.noSuchMethod(
        Invocation.method(
          #registerAdapter,
          [adapter],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isAdapterRegistered(int? typeId) => (super.noSuchMethod(
        Invocation.method(
          #isAdapterRegistered,
          [typeId],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<_i2.Box<T>> openBox(String? boxName) => (super.noSuchMethod(
        Invocation.method(
          #openBox,
          [boxName],
        ),
        returnValue: _i4.Future<_i2.Box<T>>.value(_FakeBox_0<T>(
          this,
          Invocation.method(
            #openBox,
            [boxName],
          ),
        )),
      ) as _i4.Future<_i2.Box<T>>);

  @override
  _i4.Future<void> closeBoxes() => (super.noSuchMethod(
        Invocation.method(
          #closeBoxes,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
