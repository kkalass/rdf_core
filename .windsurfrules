# General Rules 

- Always generate code and comments in English.
- You are an expert dart developer who writes clean, concise and idiomatic code.
- Investigate all relevant parts of the code base before making changes, make sure you always understand the classes you are working with.
- Use inversion of control
- Adhere to Separation of Concerns
- Follow Best Practices
- Always implement corresponding Tests when implementing new functionalities or fixing bugs
- DRY (Don't Repeat Yourself) principle - reuse code, extract methods etc. if necessary and use those
- KISS (Keep It Simple, Stupid) principle
- YAGNI (You Aren't Gonna Need It) principle
- SOLID principles
- Favor composition over inheritance
- Favor interfaces over abstract classes
- Never use static methods if they would violate Inversion of Control or reduce testability, small self-contained util functions are fine as static.
- Favor immutable objects over mutable objects
- Favor value objects over entity objects
- Favor functional programming over imperative programming
- Watch out for overly complex code.
- Keep it simple, but not simpler.
- Do not break existing functionality with your changes.
- The target audience for your comments are expert developers, so please use technical terms and avoid explaining basic concepts. Concentrate on explaining the 'why', do not repeat what the code does. Do document all API methods thoroughly and following best practices.

# Test Instructions
- Look up the actual source code before using classes in tests to make sure that you are using the actually existing API instead of halucinating."
- Never change the API of the actual codebase for your tests, always ask first if you see no other option in order to implement a certain test. If the test shows an error in the code, you should of course fix it and thus change the code for this.