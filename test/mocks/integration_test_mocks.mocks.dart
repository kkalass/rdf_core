// Mocks generated by Mockito 5.4.5 from annotations
// in solid_task/test/mocks/integration_test_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter/widgets.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:solid_task/services/auth/auth_service.dart' as _i2;
import 'package:solid_task/services/logger_service.dart' as _i7;
import 'package:solid_task/services/sync/sync_service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthResult_0 extends _i1.SmartFake implements _i2.AuthResult {
  _FakeAuthResult_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSyncResult_1 extends _i1.SmartFake implements _i3.SyncResult {
  _FakeSyncResult_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i2.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAuthenticated =>
      (super.noSuchMethod(
            Invocation.getter(#isAuthenticated),
            returnValue: false,
          )
          as bool);

  @override
  _i4.Future<List<Map<String, dynamic>>> loadProviders() =>
      (super.noSuchMethod(
            Invocation.method(#loadProviders, []),
            returnValue: _i4.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i4.Future<List<Map<String, dynamic>>>);

  @override
  _i4.Future<String> getIssuer(String? input) =>
      (super.noSuchMethod(
            Invocation.method(#getIssuer, [input]),
            returnValue: _i4.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(#getIssuer, [input]),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<_i2.AuthResult> authenticate(
    String? issuerUri,
    _i6.BuildContext? context,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#authenticate, [issuerUri, context]),
            returnValue: _i4.Future<_i2.AuthResult>.value(
              _FakeAuthResult_0(
                this,
                Invocation.method(#authenticate, [issuerUri, context]),
              ),
            ),
          )
          as _i4.Future<_i2.AuthResult>);

  @override
  _i4.Future<String?> getPodUrl(String? webId) =>
      (super.noSuchMethod(
            Invocation.method(#getPodUrl, [webId]),
            returnValue: _i4.Future<String?>.value(),
          )
          as _i4.Future<String?>);

  @override
  _i4.Future<void> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  String generateDpopToken(String? url, String? method) =>
      (super.noSuchMethod(
            Invocation.method(#generateDpopToken, [url, method]),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.method(#generateDpopToken, [url, method]),
            ),
          )
          as String);
}

/// A class which mocks [SyncService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSyncService extends _i1.Mock implements _i3.SyncService {
  MockSyncService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);

  @override
  _i4.Future<_i3.SyncResult> syncToRemote() =>
      (super.noSuchMethod(
            Invocation.method(#syncToRemote, []),
            returnValue: _i4.Future<_i3.SyncResult>.value(
              _FakeSyncResult_1(this, Invocation.method(#syncToRemote, [])),
            ),
          )
          as _i4.Future<_i3.SyncResult>);

  @override
  _i4.Future<_i3.SyncResult> syncFromRemote() =>
      (super.noSuchMethod(
            Invocation.method(#syncFromRemote, []),
            returnValue: _i4.Future<_i3.SyncResult>.value(
              _FakeSyncResult_1(this, Invocation.method(#syncFromRemote, [])),
            ),
          )
          as _i4.Future<_i3.SyncResult>);

  @override
  _i4.Future<_i3.SyncResult> fullSync() =>
      (super.noSuchMethod(
            Invocation.method(#fullSync, []),
            returnValue: _i4.Future<_i3.SyncResult>.value(
              _FakeSyncResult_1(this, Invocation.method(#fullSync, [])),
            ),
          )
          as _i4.Future<_i3.SyncResult>);

  @override
  void startPeriodicSync(Duration? interval) => super.noSuchMethod(
    Invocation.method(#startPeriodicSync, [interval]),
    returnValueForMissingStub: null,
  );

  @override
  void stopPeriodicSync() => super.noSuchMethod(
    Invocation.method(#stopPeriodicSync, []),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ContextLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockContextLogger extends _i1.Mock implements _i7.ContextLogger {
  MockContextLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void debug(String? message, [Object? error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#debug, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message, [Object? error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#info, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message, [Object? error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#warning, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void error(String? message, [Object? error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#error, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );
}
