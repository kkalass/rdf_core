// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

import 'package:rdf_core/src/graph/rdf_term.dart';

/// Ldp Vocabulary
///
/// Provides constants for the LDP vocabulary
/// (http://www.w3.org/ns/ldp#).
///
/// Example usage:
/// ```dart
/// import 'package:rdf_core/vocab.dart';
/// final property = LdpPredicates.hasMemberRelation;
/// final type = LdpTypes.Resource;
/// ```
///
/// All constants are pre-constructed as IriTerm objects to enable direct use in
/// constructing RDF graphs without repeated string concatenation or term creation.
///
/// [Vocabulary Reference](http://www.w3.org/ns/ldp#)
library ldp_vocab;

/// Base Ldp namespace and utility functions
@deprecated
class Ldp {
  // coverage:ignore-start
  const Ldp._();
  // coverage:ignore-end

  /// Base IRI for Ldp vocabulary
  /// [Spec](http://www.w3.org/ns/ldp#)
  static const String namespace = 'http://www.w3.org/ns/ldp#';
  static const String prefix = 'ldp';

  /// IRI for ldp:Resource
  ///
  /// A HTTP-addressable resource whose lifecycle is managed by a LDP server.
  ///
  static const Resource = IriTerm.prevalidated('${Ldp.namespace}Resource');

  /// IRI for ldp:RDFSource
  ///
  /// A Linked Data Platform Resource (LDPR) whose state is represented as RDF.
  ///
  static const RDFSource = IriTerm.prevalidated('${Ldp.namespace}RDFSource');

  /// IRI for ldp:NonRDFSource
  ///
  /// A Linked Data Platform Resource (LDPR) whose state is NOT represented as RDF.
  ///
  static const NonRDFSource = IriTerm.prevalidated('${Ldp.namespace}NonRDFSource');

  /// IRI for ldp:Container
  ///
  /// A Linked Data Platform RDF Source (LDP-RS) that also conforms to additional patterns and conventions for managing membership. Readers should refer to the specification defining this ontology for the list of behaviors associated with it.
  ///
  static const Container = IriTerm.prevalidated('${Ldp.namespace}Container');

  /// IRI for ldp:BasicContainer
  ///
  /// An LDPC that uses a predefined predicate to simply link to its contained resources.
  ///
  static const BasicContainer = IriTerm.prevalidated('${Ldp.namespace}BasicContainer');

  /// IRI for ldp:DirectContainer
  ///
  /// An LDPC that is similar to a LDP-DC but it allows an indirection with the ability to list as member a resource, such as a URI representing a real-world object, that is different from the resource that is created.
  ///
  static const DirectContainer = IriTerm.prevalidated('${Ldp.namespace}DirectContainer');

  /// IRI for ldp:IndirectContainer
  ///
  /// An LDPC that has the flexibility of choosing what form the membership triples take.
  ///
  static const IndirectContainer = IriTerm.prevalidated('${Ldp.namespace}IndirectContainer');

  /// IRI for ldp:PageSortCriterion
  ///
  /// Element in the list of sorting criteria used by the server to assign container members to pages.
  ///
  static const PageSortCriterion = IriTerm.prevalidated('${Ldp.namespace}PageSortCriterion');

  /// IRI for ldp:Page
  ///
  /// URI signifying that the resource is an in-sequence page resource, as defined by LDP Paging.  Typically used on Link rel='type' response headers.
  ///
  static const Page = IriTerm.prevalidated('${Ldp.namespace}Page');

  /// IRI for ldp:ldp#
  ///
  /// This ontology provides an informal representation of the concepts and terms as defined in the LDP specification.  Consult the LDP specification for normative reference.
  ///
  static const ldp_ = IriTerm.prevalidated('${Ldp.namespace}ldp#');

  /// IRI for ldp:MemberSubject
  ///
  /// Used to indicate default and typical behavior for ldp:insertedContentRelation, where the member-URI value in the membership triple added when a creation request is successful is the URI assigned to the newly created resource.
  ///
  static const MemberSubject = IriTerm.prevalidated('${Ldp.namespace}MemberSubject');

  /// IRI for ldp:PreferContainment
  ///
  /// URI identifying a LDPC's containment triples, for example to allow clients to express interest in receiving them.
  ///
  static const PreferContainment = IriTerm.prevalidated('${Ldp.namespace}PreferContainment');

  /// IRI for ldp:PreferMembership
  ///
  /// URI identifying a LDPC's membership triples, for example to allow clients to express interest in receiving them.
  ///
  static const PreferMembership = IriTerm.prevalidated('${Ldp.namespace}PreferMembership');

  /// IRI for ldp:PreferEmptyContainer
  ///
  /// Archaic alias for ldp:PreferMinimalContainer
  ///
  static const PreferEmptyContainer = IriTerm.prevalidated('${Ldp.namespace}PreferEmptyContainer');

  /// IRI for ldp:PreferMinimalContainer
  ///
  /// URI identifying the subset of a LDPC's triples present in an empty LDPC, for example to allow clients to express interest in receiving them.  Currently this excludes containment and membership triples, but in the future other exclusions might be added.  This definition is written to automatically exclude those new classes of triples.
  ///
  static const PreferMinimalContainer = IriTerm.prevalidated('${Ldp.namespace}PreferMinimalContainer');

  /// IRI for ldp:Ascending
  ///
  /// Ascending order.
  ///
  static const Ascending = IriTerm.prevalidated('${Ldp.namespace}Ascending');

  /// IRI for ldp:Descending
  ///
  /// Descending order.
  ///
  static const Descending = IriTerm.prevalidated('${Ldp.namespace}Descending');

  /// IRI for ldp:hasMemberRelation
  ///
  /// Indicates which predicate is used in membership triples, and that the membership triple pattern is < membership-constant-URI , object-of-hasMemberRelation, member-URI >.
  ///
  /// Domain: http://www.w3.org/ns/ldp#Container
  /// Range: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  ///
  static const hasMemberRelation = IriTerm.prevalidated('${Ldp.namespace}hasMemberRelation');

  /// IRI for ldp:isMemberOfRelation
  ///
  /// Indicates which predicate is used in membership triples, and that the membership triple pattern is < member-URI , object-of-isMemberOfRelation, membership-constant-URI >.
  ///
  /// Domain: http://www.w3.org/ns/ldp#Container
  /// Range: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  ///
  static const isMemberOfRelation = IriTerm.prevalidated('${Ldp.namespace}isMemberOfRelation');

  /// IRI for ldp:membershipResource
  ///
  /// Indicates the membership-constant-URI in a membership triple.  Depending upon the membership triple pattern a container uses, as indicated by the presence of ldp:hasMemberRelation or ldp:isMemberOfRelation, the membership-constant-URI might occupy either the subject or object position in membership triples.
  ///
  /// Domain: http://www.w3.org/ns/ldp#Container
  /// Range: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const membershipResource = IriTerm.prevalidated('${Ldp.namespace}membershipResource');

  /// IRI for ldp:insertedContentRelation
  ///
  /// Indicates which triple in a creation request should be used as the member-URI value in the membership triple added when the creation request is successful.
  ///
  /// Domain: http://www.w3.org/ns/ldp#Container
  /// Range: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  ///
  static const insertedContentRelation = IriTerm.prevalidated('${Ldp.namespace}insertedContentRelation');

  /// IRI for ldp:member
  ///
  /// LDP servers should use this predicate as the membership predicate if there is no obvious predicate from an application vocabulary to use.
  ///
  /// Domain: http://www.w3.org/ns/ldp#Resource
  /// Range: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const member = IriTerm.prevalidated('${Ldp.namespace}member');

  /// IRI for ldp:contains
  ///
  /// Links a container with resources created through the container.
  ///
  /// Domain: http://www.w3.org/ns/ldp#Container
  /// Range: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const contains = IriTerm.prevalidated('${Ldp.namespace}contains');

  /// IRI for ldp:constrainedBy
  ///
  /// Links a resource with constraints that the server requires requests like creation and update to conform to.
  ///
  /// Domain: http://www.w3.org/ns/ldp#Resource
  /// Range: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const constrainedBy = IriTerm.prevalidated('${Ldp.namespace}constrainedBy');

  /// IRI for ldp:pageSortCriteria
  ///
  /// Link to the list of sorting criteria used by the server in a representation.  Typically used on Link response headers as an extension link relation URI in the rel= parameter.
  ///
  /// Domain: http://www.w3.org/ns/ldp#Page
  /// Range: http://www.w3.org/1999/02/22-rdf-syntax-ns#List
  ///
  static const pageSortCriteria = IriTerm.prevalidated('${Ldp.namespace}pageSortCriteria');

  /// IRI for ldp:pageSortPredicate
  ///
  /// Predicate used to specify the order of the members across a page sequence's in-sequence page resources; it asserts nothing about the order of members in the representation of a single page.
  ///
  /// Domain: http://www.w3.org/ns/ldp#PageSortCriterion
  /// Range: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  ///
  static const pageSortPredicate = IriTerm.prevalidated('${Ldp.namespace}pageSortPredicate');

  /// IRI for ldp:pageSortOrder
  ///
  /// The ascending/descending/etc order used to order the members across pages in a page sequence.
  ///
  /// Domain: http://www.w3.org/ns/ldp#PageSortCriterion
  /// Range: http://www.w3.org/1999/02/22-rdf-syntax-ns#Resource
  ///
  static const pageSortOrder = IriTerm.prevalidated('${Ldp.namespace}pageSortOrder');

  /// IRI for ldp:pageSortCollation
  ///
  /// The collation used to order the members across pages in a page sequence when comparing strings.
  ///
  /// Domain: http://www.w3.org/ns/ldp#PageSortCriterion
  /// Range: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  ///
  static const pageSortCollation = IriTerm.prevalidated('${Ldp.namespace}pageSortCollation');

  /// IRI for ldp:pageSequence
  ///
  /// Link to a page sequence resource, as defined by LDP Paging.  Typically used to communicate the sorting criteria used to allocate LDPC members to pages.
  ///
  static const pageSequence = IriTerm.prevalidated('${Ldp.namespace}pageSequence');

  /// IRI for ldp:inbox
  ///
  /// Links a resource to a container where notifications for the resource can be created and discovered.
  ///
  static const inbox = IriTerm.prevalidated('${Ldp.namespace}inbox');

}

/// Ldp type/class constants.
///
/// Contains IRIs that represent classes or types defined in the Ldp vocabulary.
@deprecated
class LdpTypes {
  // coverage:ignore-start
  const LdpTypes._();
  // coverage:ignore-end

  /// IRI for ldp:Resource
  ///
  /// A HTTP-addressable resource whose lifecycle is managed by a LDP server.
  ///
  static const Resource = IriTerm.prevalidated('${Ldp.namespace}Resource');

  /// IRI for ldp:RDFSource
  ///
  /// A Linked Data Platform Resource (LDPR) whose state is represented as RDF.
  ///
  static const RDFSource = IriTerm.prevalidated('${Ldp.namespace}RDFSource');

  /// IRI for ldp:NonRDFSource
  ///
  /// A Linked Data Platform Resource (LDPR) whose state is NOT represented as RDF.
  ///
  static const NonRDFSource = IriTerm.prevalidated('${Ldp.namespace}NonRDFSource');

  /// IRI for ldp:Container
  ///
  /// A Linked Data Platform RDF Source (LDP-RS) that also conforms to additional patterns and conventions for managing membership. Readers should refer to the specification defining this ontology for the list of behaviors associated with it.
  ///
  static const Container = IriTerm.prevalidated('${Ldp.namespace}Container');

  /// IRI for ldp:BasicContainer
  ///
  /// An LDPC that uses a predefined predicate to simply link to its contained resources.
  ///
  static const BasicContainer = IriTerm.prevalidated('${Ldp.namespace}BasicContainer');

  /// IRI for ldp:DirectContainer
  ///
  /// An LDPC that is similar to a LDP-DC but it allows an indirection with the ability to list as member a resource, such as a URI representing a real-world object, that is different from the resource that is created.
  ///
  static const DirectContainer = IriTerm.prevalidated('${Ldp.namespace}DirectContainer');

  /// IRI for ldp:IndirectContainer
  ///
  /// An LDPC that has the flexibility of choosing what form the membership triples take.
  ///
  static const IndirectContainer = IriTerm.prevalidated('${Ldp.namespace}IndirectContainer');

  /// IRI for ldp:PageSortCriterion
  ///
  /// Element in the list of sorting criteria used by the server to assign container members to pages.
  ///
  static const PageSortCriterion = IriTerm.prevalidated('${Ldp.namespace}PageSortCriterion');

  /// IRI for ldp:Page
  ///
  /// URI signifying that the resource is an in-sequence page resource, as defined by LDP Paging.  Typically used on Link rel='type' response headers.
  ///
  static const Page = IriTerm.prevalidated('${Ldp.namespace}Page');

}

/// Ldp predicate constants.
///
/// Contains IRIs for properties defined in the Ldp vocabulary.
@deprecated
class LdpPredicates {
  // coverage:ignore-start
  const LdpPredicates._();
  // coverage:ignore-end

  /// IRI for ldp:hasMemberRelation
  ///
  /// Indicates which predicate is used in membership triples, and that the membership triple pattern is < membership-constant-URI , object-of-hasMemberRelation, member-URI >.
  ///
  /// Domain: http://www.w3.org/ns/ldp#Container
  /// Range: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  ///
  static const hasMemberRelation = IriTerm.prevalidated('${Ldp.namespace}hasMemberRelation');

  /// IRI for ldp:isMemberOfRelation
  ///
  /// Indicates which predicate is used in membership triples, and that the membership triple pattern is < member-URI , object-of-isMemberOfRelation, membership-constant-URI >.
  ///
  /// Domain: http://www.w3.org/ns/ldp#Container
  /// Range: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  ///
  static const isMemberOfRelation = IriTerm.prevalidated('${Ldp.namespace}isMemberOfRelation');

  /// IRI for ldp:membershipResource
  ///
  /// Indicates the membership-constant-URI in a membership triple.  Depending upon the membership triple pattern a container uses, as indicated by the presence of ldp:hasMemberRelation or ldp:isMemberOfRelation, the membership-constant-URI might occupy either the subject or object position in membership triples.
  ///
  /// Domain: http://www.w3.org/ns/ldp#Container
  /// Range: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const membershipResource = IriTerm.prevalidated('${Ldp.namespace}membershipResource');

  /// IRI for ldp:insertedContentRelation
  ///
  /// Indicates which triple in a creation request should be used as the member-URI value in the membership triple added when the creation request is successful.
  ///
  /// Domain: http://www.w3.org/ns/ldp#Container
  /// Range: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  ///
  static const insertedContentRelation = IriTerm.prevalidated('${Ldp.namespace}insertedContentRelation');

  /// IRI for ldp:member
  ///
  /// LDP servers should use this predicate as the membership predicate if there is no obvious predicate from an application vocabulary to use.
  ///
  /// Domain: http://www.w3.org/ns/ldp#Resource
  /// Range: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const member = IriTerm.prevalidated('${Ldp.namespace}member');

  /// IRI for ldp:contains
  ///
  /// Links a container with resources created through the container.
  ///
  /// Domain: http://www.w3.org/ns/ldp#Container
  /// Range: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const contains = IriTerm.prevalidated('${Ldp.namespace}contains');

  /// IRI for ldp:constrainedBy
  ///
  /// Links a resource with constraints that the server requires requests like creation and update to conform to.
  ///
  /// Domain: http://www.w3.org/ns/ldp#Resource
  /// Range: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const constrainedBy = IriTerm.prevalidated('${Ldp.namespace}constrainedBy');

  /// IRI for ldp:pageSortCriteria
  ///
  /// Link to the list of sorting criteria used by the server in a representation.  Typically used on Link response headers as an extension link relation URI in the rel= parameter.
  ///
  /// Domain: http://www.w3.org/ns/ldp#Page
  /// Range: http://www.w3.org/1999/02/22-rdf-syntax-ns#List
  ///
  static const pageSortCriteria = IriTerm.prevalidated('${Ldp.namespace}pageSortCriteria');

  /// IRI for ldp:pageSortPredicate
  ///
  /// Predicate used to specify the order of the members across a page sequence's in-sequence page resources; it asserts nothing about the order of members in the representation of a single page.
  ///
  /// Domain: http://www.w3.org/ns/ldp#PageSortCriterion
  /// Range: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  ///
  static const pageSortPredicate = IriTerm.prevalidated('${Ldp.namespace}pageSortPredicate');

  /// IRI for ldp:pageSortOrder
  ///
  /// The ascending/descending/etc order used to order the members across pages in a page sequence.
  ///
  /// Domain: http://www.w3.org/ns/ldp#PageSortCriterion
  /// Range: http://www.w3.org/1999/02/22-rdf-syntax-ns#Resource
  ///
  static const pageSortOrder = IriTerm.prevalidated('${Ldp.namespace}pageSortOrder');

  /// IRI for ldp:pageSortCollation
  ///
  /// The collation used to order the members across pages in a page sequence when comparing strings.
  ///
  /// Domain: http://www.w3.org/ns/ldp#PageSortCriterion
  /// Range: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  ///
  static const pageSortCollation = IriTerm.prevalidated('${Ldp.namespace}pageSortCollation');

  /// IRI for ldp:pageSequence
  ///
  /// Link to a page sequence resource, as defined by LDP Paging.  Typically used to communicate the sorting criteria used to allocate LDPC members to pages.
  ///
  static const pageSequence = IriTerm.prevalidated('${Ldp.namespace}pageSequence');

  /// IRI for ldp:inbox
  ///
  /// Links a resource to a container where notifications for the resource can be created and discovered.
  ///
  static const inbox = IriTerm.prevalidated('${Ldp.namespace}inbox');

}

